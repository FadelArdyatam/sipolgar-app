{"version":3,"sources":["../src/utils/resolve-import.ts","../src/utils/get-config.ts","../src/utils/get-package-manager.ts","../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/prompt-for-config.ts","../src/commands/add.ts","../src/items/components.ts","../src/items/index.ts","../src/utils/copy-folder.ts","../src/commands/init.ts","../src/index.ts"],"sourcesContent":["import { createMatchPath, type ConfigLoaderSuccessResult } from \"tsconfig-paths\"\n\nexport async function resolveImport(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, \"absoluteBaseUrl\" | \"paths\">\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    [\".ts\", \".tsx\"]\n  )\n}\n","import { resolveImport } from '@/src/utils/resolve-import';\nimport { cosmiconfig } from 'cosmiconfig';\nimport { loadConfig } from 'tsconfig-paths';\nimport { z } from 'zod';\n\nexport const DEFAULT_COMPONENTS = '~/components';\nexport const DEFAULT_LIB = '~/lib';\n\nconst explorer = cosmiconfig('components', {\n  searchPlaces: ['components.json'],\n});\n\nexport const rawConfigSchema = z.object({\n  aliases: z.object({\n    components: z.string(),\n    lib: z.string(),\n  }),\n});\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>;\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    lib: z.string(),\n    components: z.string(),\n  }),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd);\n\n  if (!config) {\n    return null;\n  }\n\n  return await resolveConfigPaths(cwd, config);\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsConfig = await loadConfig(cwd);\n\n  if (tsConfig.resultType === 'failed') {\n    throw new Error(`Failed to load tsconfig.json. ${tsConfig.message ?? ''}`.trim());\n  }\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      lib: await resolveImport(config.aliases['lib'], tsConfig),\n      components: await resolveImport(config.aliases['components'], tsConfig),\n    },\n  });\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await explorer.search(cwd);\n\n    if (!configResult) {\n      return null;\n    }\n\n    return rawConfigSchema.parse(configResult.config);\n  } catch (error) {\n    throw new Error(`Invalid configuration found in ${cwd}/components.json.`);\n  }\n}\n","import { detect } from '@antfu/ni';\n\nexport async function getPackageManager(\n  targetDir: string\n): Promise<'yarn' | 'pnpm' | 'bun' | 'npm'> {\n  const packageManager = await detect({ programmatic: true, cwd: targetDir });\n\n  if (packageManager === 'yarn@berry') return 'yarn';\n  if (packageManager === 'pnpm@6') return 'pnpm';\n  if (packageManager === 'bun') return 'bun';\n\n  return packageManager ?? 'npm';\n}\n","import chalk from \"chalk\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args))\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args))\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args))\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args))\n  },\n  break() {\n    console.log(\"\")\n  },\n}\n","import { logger } from \"@/src/utils/logger\"\n\nexport function handleError(error: unknown) {\n  if (typeof error === \"string\") {\n    logger.error(error)\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message)\n    process.exit(1)\n  }\n\n  logger.error(\"Something went wrong. Please try again.\")\n  process.exit(1)\n}\n","import {\n  DEFAULT_COMPONENTS,\n  DEFAULT_LIB,\n  rawConfigSchema,\n  resolveConfigPaths,\n} from '@/src/utils/get-config';\nimport { logger } from '@/src/utils/logger';\nimport chalk from 'chalk';\nimport { promises as fs } from 'fs';\nimport ora from 'ora';\nimport path from 'path';\nimport prompts from 'prompts';\n\nexport async function promptForConfig(cwd: string) {\n  const highlight = (text: string) => chalk.cyan(text);\n\n  const options = await prompts([\n    {\n      type: 'text',\n      name: 'components',\n      message: `Configure the import alias for ${highlight('components')}:`,\n      initial: DEFAULT_COMPONENTS,\n    },\n    {\n      type: 'text',\n      name: 'lib',\n      message: `Configure the import alias for ${highlight('lib')}:`,\n      initial: DEFAULT_LIB,\n    },\n  ]);\n\n  const config = rawConfigSchema.parse({\n    aliases: {\n      lib: options.lib || DEFAULT_COMPONENTS,\n      components: options.components || DEFAULT_LIB,\n    },\n  });\n\n  const { proceed } = await prompts({\n    type: 'confirm',\n    name: 'proceed',\n    message: `Write configuration to ${highlight('components.json')}. Proceed?`,\n    initial: true,\n  });\n\n  if (proceed) {\n    logger.info('');\n    const spinner = ora(`Writing components.json...`).start();\n    const targetPath = path.resolve(cwd, 'components.json');\n    await fs.writeFile(targetPath, JSON.stringify(config, null, 2), 'utf8');\n    spinner.succeed();\n  }\n\n  return await resolveConfigPaths(cwd, config);\n}\n","import { Config, getConfig } from '@/src/utils/get-config';\nimport { getPackageManager } from '@/src/utils/get-package-manager';\nimport { handleError } from '@/src/utils/handle-error';\nimport { logger } from '@/src/utils/logger';\nimport { promptForConfig } from '@/src/utils/prompt-for-config';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport { execa } from 'execa';\nimport { existsSync, promises as fs } from 'fs';\nimport ora, { Ora } from 'ora';\nimport path from 'path';\nimport prompts from 'prompts';\nimport { fileURLToPath } from 'url';\nimport { z } from 'zod';\nimport { Component, INVALID_COMPONENT_ERROR, getAllComponentsToWrite } from '../items';\nimport { COMPONENTS } from '../items/components';\n\nconst filePath = fileURLToPath(import.meta.url);\nconst fileDir = path.dirname(filePath);\n\nconst addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  path: z.string().optional(),\n});\n\nexport const add = new Command()\n  .name('add')\n  .description('add components to your project')\n  .argument('[components...]', 'the components to add')\n  .option('-o, --overwrite', 'overwrite existing files.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd()\n  )\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        ...opts,\n      });\n\n      const cwd = path.resolve(options.cwd);\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`);\n        process.exit(1);\n      }\n\n      let config = await getConfig(cwd);\n\n      if (!config) {\n        config = await promptForConfig(cwd);\n      }\n\n      let selectedComponents: Array<string> = options.components ?? [];\n      if (!selectedComponents?.length) {\n        const { components } = await prompts({\n          type: 'multiselect',\n          name: 'components',\n          message: 'Which components would you like to add?',\n          hint: 'Space to select. A to toggle all. Enter to submit.',\n          instructions: false,\n          choices: COMPONENTS.map((entry) => ({\n            title: entry.name,\n            value: entry.name,\n            selected: false,\n          })),\n        });\n        selectedComponents = components;\n      }\n\n      if (!selectedComponents?.length) {\n        logger.warn('No components selected. Exiting.');\n        process.exit(0);\n      }\n\n      const spinner = ora(`Installing components...`).start();\n\n      let componentsToWrite: Array<Component> = [];\n      try {\n        componentsToWrite = getAllComponentsToWrite(selectedComponents);\n      } catch (err) {\n        if (err instanceof Error && err.message === INVALID_COMPONENT_ERROR) {\n          logger.error(\n            `Invalid component(s): ${selectedComponents\n              .filter((component) => !COMPONENTS.find((entry) => entry.name === component))\n              .join(', ')}`\n          );\n          process.exit(1);\n        }\n        logger.error(err);\n      }\n\n      const npmPackages: Array<string> = [];\n\n      for (const comp of componentsToWrite) {\n        spinner.text = `Installing ${comp.name}...`;\n\n        await writeFiles(comp, comp.paths, config, spinner, options.overwrite);\n\n        npmPackages.push(...comp.npmPackages);\n      }\n\n      const packageManager = await getPackageManager(cwd);\n\n      const uniqueNpmPackages = Array.from(new Set(npmPackages));\n\n      if (uniqueNpmPackages.length) {\n        spinner.text = `Installing ${uniqueNpmPackages.join(', ')}...`;\n        await execa(\n          packageManager,\n          [packageManager === 'npm' ? 'install' : 'add', ...uniqueNpmPackages],\n          {\n            cwd,\n          }\n        );\n      }\n      spinner.succeed(`Done.`);\n    } catch (error) {\n      handleError(error);\n    }\n  });\n\nasync function writeFiles(\n  comp: Component,\n  paths: Array<{ from: string; distFrom?: string; to: { folder: string; file: string } }>,\n  config: Config,\n  spinner: Ora,\n  overwriteFlag: boolean\n) {\n  for (const compPath of paths) {\n    const targetDir = path.join(config.resolvedPaths.components, compPath.to.folder);\n    if (!existsSync(targetDir)) {\n      await fs.mkdir(targetDir, { recursive: true });\n    }\n\n    spinner.stop();\n\n    if (existsSync(path.join(targetDir, compPath.to.file))) {\n      const filePath = [compPath.to.folder, compPath.to.file].join('/');\n      if (!overwriteFlag) {\n        logger.info(\n          `File already exists: ${chalk.bgCyan(\n            filePath\n          )} was skipped. To overwrite, run with the ${chalk.green('--overwrite')} flag.`\n        );\n        continue;\n      }\n\n      const { overwrite } = await prompts({\n        type: 'confirm',\n        name: 'overwrite',\n        message: `File already exists: ${chalk.yellow(filePath)}. Would you like to overwrite?`,\n        initial: false,\n      });\n\n      if (!overwrite) {\n        logger.info(`Skipped`);\n        continue;\n      }\n    }\n\n    spinner.start(`Installing ${comp.name}...`);\n    const readFromPath = compPath.distFrom\n      ? path.join(fileDir, '../__generated/components', compPath.distFrom)\n      : path.join(fileDir, '../__generated/components', compPath.to.folder, compPath.to.file);\n    try {\n      const content = await fs.readFile(path.resolve(readFromPath), 'utf8');\n      await fs.writeFile(\n        path.join(targetDir, compPath.to.file),\n        fixImports(content, config.aliases.components, config.aliases.lib)\n      );\n    } catch (error) {\n      handleError(error);\n    }\n  }\n\n  for (const icon of comp.icons ?? []) {\n    const targetDir = path.resolve(config.resolvedPaths.lib, 'icons');\n    if (!existsSync(targetDir)) {\n      await fs.mkdir(targetDir, { recursive: true });\n      try {\n        await fs.writeFile(\n          path.join(targetDir, `iconWithClassName.ts`),\n          `import type { LucideIcon } from 'lucide-react-native';\\nimport { cssInterop } from 'nativewind';\\n\\nexport function iconWithClassName(icon: LucideIcon) {\\ncssInterop(icon, {\\n  className: {\\n    target: 'style',\\n    nativeStyleToProp: {\\n      color: true,\\n      opacity: true,\\n    },\\n  },\\n});\\n}`\n        );\n      } catch (error) {\n        handleError(error);\n      }\n    }\n\n    if (existsSync(path.join(targetDir, `${icon}.tsx`))) {\n      const filePath = path.join(targetDir, `${icon}.tsx`);\n      if (!overwriteFlag) {\n        logger.info(\n          `File already exists: ${chalk.bgCyan(\n            `${icon}.tsx`\n          )} was skipped. To overwrite, run with the ${chalk.green('--overwrite')} flag.`\n        );\n        continue;\n      }\n\n      const { overwrite } = await prompts({\n        type: 'confirm',\n        name: 'overwrite',\n        message: `File already exists: ${chalk.yellow(filePath)}. Would you like to overwrite?`,\n        initial: false,\n      });\n\n      if (!overwrite) {\n        logger.info(`Skipped ${icon}.tsx`);\n        continue;\n      }\n    }\n\n    spinner.start(`Adding the ${icon} icon...`);\n\n    try {\n      await fs.writeFile(\n        path.join(targetDir, `${icon}.tsx`),\n        `import { ${icon} } from 'lucide-react-native';\\nimport { iconWithClassName } from './iconWithClassName';\\niconWithClassName(${icon});\\nexport { ${icon} };`\n      );\n    } catch (error) {\n      handleError(error);\n    }\n  }\n}\n\nfunction fixImports(rawfile: string, componentsAlias: string, libAlias: string) {\n  return rawfile\n    .replace('./typography', `${componentsAlias}/ui/typography`)\n    .replace('./text', `${componentsAlias}/ui/text`)\n    .replaceAll('../../components', componentsAlias)\n    .replaceAll('../../lib', libAlias);\n}\n","export const COMPONENTS = [\n  {\n    name: 'accordion',\n    dependencies: ['text'],\n    icons: ['ChevronDown'],\n    npmPackages: ['@rn-primitives/accordion'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/accordion.tsx',\n        to: {\n          folder: 'ui',\n          file: 'accordion.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'alert',\n    dependencies: ['text'],\n    icons: [],\n    npmPackages: [],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/alert.tsx',\n        to: {\n          folder: 'ui',\n          file: 'alert.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'alert-dialog',\n    dependencies: ['button', 'text'],\n    icons: [],\n    npmPackages: ['@rn-primitives/alert-dialog'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/alert-dialog.tsx',\n        to: {\n          folder: 'ui',\n          file: 'alert-dialog.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'aspect-ratio',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/aspect-ratio'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/aspect-ratio.tsx',\n        to: {\n          folder: 'ui',\n          file: 'aspect-ratio.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'avatar',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/avatar'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/avatar.tsx',\n        to: {\n          folder: 'ui',\n          file: 'avatar.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'badge',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/slot', '@rn-primitives/types'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/badge.tsx',\n        to: {\n          folder: 'ui',\n          file: 'badge.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'button',\n    dependencies: ['text'],\n    icons: [],\n    npmPackages: ['@rn-primitives/types'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/button.tsx',\n        to: {\n          folder: 'ui',\n          file: 'button.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'card',\n    dependencies: ['text'],\n    icons: [],\n    npmPackages: ['@rn-primitives/types'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/card.tsx',\n        to: {\n          folder: 'ui',\n          file: 'card.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'checkbox',\n    dependencies: [],\n    icons: ['Check'],\n    npmPackages: ['@rn-primitives/checkbox'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/checkbox.tsx',\n        to: {\n          folder: 'ui',\n          file: 'checkbox.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'collapsible',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/collapsible'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/collapsible.tsx',\n        to: {\n          folder: 'ui',\n          file: 'collapsible.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'context-menu',\n    dependencies: ['text'],\n    icons: ['Check', 'ChevronDown', 'ChevronRight', 'ChevronUp'],\n    npmPackages: ['@rn-primitives/context-menu'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/context-menu.tsx',\n        to: {\n          folder: 'ui',\n          file: 'context-menu.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'dialog',\n    dependencies: [],\n    icons: ['X'],\n    npmPackages: ['@rn-primitives/dialog'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/dialog.tsx',\n        to: {\n          folder: 'ui',\n          file: 'dialog.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'dropdown-menu',\n    dependencies: ['text'],\n    icons: ['Check', 'ChevronDown', 'ChevronRight', 'ChevronUp'],\n    npmPackages: ['@rn-primitives/dropdown-menu'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/dropdown-menu.tsx',\n        to: {\n          folder: 'ui',\n          file: 'dropdown-menu.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'hover-card',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/hover-card'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/hover-card.tsx',\n        to: {\n          folder: 'ui',\n          file: 'hover-card.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'input',\n    dependencies: [],\n    icons: [],\n    npmPackages: [],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/input.tsx',\n        to: {\n          folder: 'ui',\n          file: 'input.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'label',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/label'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/label.tsx',\n        to: {\n          folder: 'ui',\n          file: 'label.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'menubar',\n    dependencies: ['text'],\n    icons: ['Check', 'ChevronDown', 'ChevronRight', 'ChevronUp'],\n    npmPackages: ['@rn-primitives/menubar'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/menubar.tsx',\n        to: {\n          folder: 'ui',\n          file: 'menubar.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'navigation-menu',\n    dependencies: [],\n    icons: ['ChevronDown'],\n    npmPackages: ['@rn-primitives/navigation-menu'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/navigation-menu.tsx',\n        to: {\n          folder: 'ui',\n          file: 'navigation-menu.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'popover',\n    dependencies: ['text'],\n    icons: [],\n    npmPackages: ['@rn-primitives/popover'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/popover.tsx',\n        to: {\n          folder: 'ui',\n          file: 'popover.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'progress',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/progress'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/progress.tsx',\n        to: {\n          folder: 'ui',\n          file: 'progress.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'radio-group',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/radio-group'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/radio-group.tsx',\n        to: {\n          folder: 'ui',\n          file: 'radio-group.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'select',\n    dependencies: [],\n    icons: ['Check', 'ChevronDown', 'ChevronUp'],\n    npmPackages: ['@rn-primitives/select'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/select.tsx',\n        to: {\n          folder: 'ui',\n          file: 'select.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'separator',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/separator'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/separator.tsx',\n        to: {\n          folder: 'ui',\n          file: 'separator.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'skeleton',\n    dependencies: [],\n    icons: [],\n    npmPackages: [],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/skeleton.tsx',\n        to: {\n          folder: 'ui',\n          file: 'skeleton.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'switch',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/switch'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/switch.tsx',\n        to: {\n          folder: 'ui',\n          file: 'switch.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'table',\n    dependencies: ['text'],\n    icons: [],\n    npmPackages: ['@rn-primitives/table'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/table.tsx',\n        to: {\n          folder: 'ui',\n          file: 'table.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'tabs',\n    dependencies: ['text'],\n    icons: [],\n    npmPackages: ['@rn-primitives/tabs'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/tabs.tsx',\n        to: {\n          folder: 'ui',\n          file: 'tabs.tsx',\n        },\n      },\n    ],\n  },\n  {\n    name: 'text',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/slot', '@rn-primitives/types'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/text.tsx',\n        to: { folder: 'ui', file: 'text.tsx' },\n      },\n    ],\n  },\n  {\n    name: 'textarea',\n    dependencies: [],\n    icons: [],\n    npmPackages: [],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/textarea.tsx',\n        to: { folder: 'ui', file: 'textarea.tsx' },\n      },\n    ],\n  },\n  {\n    name: 'toggle',\n    dependencies: ['text'],\n    icons: [],\n    npmPackages: ['@rn-primitives/toggle'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/toggle.tsx',\n        to: { folder: 'ui', file: 'toggle.tsx' },\n      },\n    ],\n  },\n  {\n    name: 'toggle-group',\n    dependencies: ['text'],\n    icons: [],\n    npmPackages: ['@rn-primitives/toggle-group'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/toggle-group.tsx',\n        to: { folder: 'ui', file: 'toggle-group.tsx' },\n      },\n    ],\n  },\n  {\n    name: 'tooltip',\n    dependencies: ['text'],\n    icons: [],\n    npmPackages: ['@rn-primitives/tooltip'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/tooltip.tsx',\n        to: { folder: 'ui', file: 'tooltip.tsx' },\n      },\n    ],\n  },\n  {\n    name: 'typography',\n    dependencies: [],\n    icons: [],\n    npmPackages: ['@rn-primitives/slot', '@rn-primitives/types'],\n    paths: [\n      {\n        from: './node_modules/@rnr/reusables/src/components/ui/typography.tsx',\n        to: { folder: 'ui', file: 'typography.tsx' },\n      },\n    ],\n  },\n];\n","import { COMPONENTS } from './components';\n\nexport type Component = (typeof COMPONENTS)[number] & { icons?: string[] };\ntype ComponentName = (typeof COMPONENTS)[number]['name'];\n\nfunction getComponentDependencies(\n  componentName: ComponentName,\n  visited = new Set<ComponentName>()\n) {\n  const component = COMPONENTS.find((comp) => comp.name === componentName);\n  if (!component) return [];\n\n  visited.add(componentName);\n\n  let dependencies: ComponentName[] = component.dependencies.slice();\n\n  component.dependencies.forEach((dependency) => {\n    if (!visited.has(dependency)) {\n      const childDependencies = getComponentDependencies(dependency, visited);\n      dependencies = dependencies.concat(childDependencies);\n    }\n  });\n\n  return dependencies;\n}\n\nexport const INVALID_COMPONENT_ERROR = 'invalid component';\n\nexport function getAllComponentsToWrite(componentNames: string[]): Component[] {\n  const uniqueComponents = new Set<ComponentName>();\n\n  if (\n    componentNames.some((componentName) => !COMPONENTS.find((comp) => comp.name === componentName))\n  ) {\n    throw new Error(INVALID_COMPONENT_ERROR);\n  }\n\n  componentNames.forEach((componentName) => {\n    const allDependencies = getComponentDependencies(componentName as ComponentName);\n    allDependencies.unshift(componentName as never); // Add the component itself to the list\n    allDependencies.forEach((dep) => {\n      uniqueComponents.add(dep);\n    });\n  });\n\n  return Array.from(uniqueComponents).map((dep) => {\n    const comp = COMPONENTS.find((comp) => comp.name === dep);\n    if (!comp) {\n      throw new Error(INVALID_COMPONENT_ERROR);\n    }\n    return comp;\n  });\n}\n","import { existsSync, promises as fs } from 'fs';\nimport path from 'path';\n\nexport async function copyFolder(\n  src: string,\n  dest: string,\n  options: { ignore: string[]; renameTemplateFiles: boolean } = {\n    ignore: [],\n    renameTemplateFiles: false,\n  }\n) {\n  if (!existsSync(src)) {\n    throw new Error(`Source folder does not exist: ${src}`);\n  }\n\n  if (!existsSync(dest)) {\n    await fs.mkdir(dest, { recursive: true });\n  }\n\n  const entries = await fs.readdir(src, { withFileTypes: true });\n\n  for (const entry of entries) {\n    const srcPath = path.join(src, entry.name);\n    const destPath = path.join(dest, entry.name);\n\n    if (options.ignore.includes(entry.name)) {\n      continue;\n    }\n\n    if (entry.isDirectory()) {\n      await copyFolder(srcPath, destPath, options);\n    } else if (entry.isFile()) {\n      if (options.renameTemplateFiles && entry.name === 'gitignore-template') {\n        await fs.copyFile(srcPath, path.join(dest, '.gitignore'));\n      } else if (options.renameTemplateFiles && entry.name === 'npmrc-template') {\n        await fs.copyFile(srcPath, path.join(dest, '.npmrc'));\n      } else {\n        await fs.copyFile(srcPath, destPath);\n      }\n    }\n  }\n}\n","import { copyFolder } from '@/src/utils/copy-folder';\nimport { handleError } from '@/src/utils/handle-error';\nimport { logger } from '@/src/utils/logger';\nimport chalk from 'chalk';\nimport { execSync } from 'child_process';\nimport { Command } from 'commander';\nimport { execa } from 'execa';\nimport { existsSync, promises as fs } from 'fs';\nimport ora from 'ora';\nimport path from 'path';\nimport prompts from 'prompts';\nimport { fileURLToPath } from 'url';\n\nconst filePath = fileURLToPath(import.meta.url);\nconst fileDir = path.dirname(filePath);\n\nexport const init = new Command()\n  .name('init')\n  .description('Initialize a new React Native Reusables project')\n  .action(async () => {\n    try {\n      const cwd = process.cwd();\n\n      if (existsSync(cwd) && existsSync(path.join(cwd, 'package.json'))) {\n        const { option } = await prompts({\n          type: 'select',\n          name: 'option',\n          message: 'Package.json found. How would you like to proceed?',\n          choices: [\n            { title: 'Initialize a new project', value: 'new-project' },\n            { title: 'Cancel', value: 'cancel' },\n          ],\n          initial: false,\n        });\n\n        if (option === 'cancel') {\n          logger.info('Installation cancelled.');\n          process.exit(0);\n        }\n      }\n\n      const { projectPath } = await prompts({\n        type: 'text',\n        name: 'projectPath',\n        message: `Enter the project name or relative path (e.g., 'my-app' or './apps/my-app'):`,\n        initial: './my-app',\n      });\n\n      const { packageManager } = await prompts({\n        type: 'select',\n        name: 'packageManager',\n        message: 'Which package manager would you like the CLI to use?',\n        choices: [\n          { title: 'npm', value: 'npm' },\n          { title: 'yarn', value: 'yarn' },\n          { title: 'pnpm', value: 'pnpm' },\n          { title: 'bun', value: 'bun' },\n          { title: 'None.', value: 'none' },\n        ],\n      });\n\n      const projectName = path.basename(projectPath);\n\n      const spinner = ora(`Initializing ${projectName}...`).start();\n\n      const fullProjectPath = path.join(cwd, projectPath);\n      if (!existsSync(fullProjectPath)) {\n        await fs.mkdir(fullProjectPath, { recursive: true });\n      }\n\n      const filesToIgnore = [];\n\n      if (packageManager !== 'pnpm') {\n        filesToIgnore.push('npmrc-template');\n      }\n\n      await copyFolder(path.join(fileDir, '../__generated/starter-base'), fullProjectPath, {\n        ignore: filesToIgnore,\n        renameTemplateFiles: true,\n      });\n\n      await Promise.all([\n        replaceAllInJsonFile(path.join(fullProjectPath, 'app.json'), 'starter-base', projectName),\n        replaceAllInJsonFile(\n          path.join(fullProjectPath, 'package.json'),\n          '@rnr/starter-base',\n          projectName\n        ),\n      ]);\n\n      if (packageManager !== 'none') {\n        spinner.start(\n          `Installing dependencies using ${packageManager} (this may take a few minutes)...`\n        );\n        await execa(packageManager, ['install'], {\n          cwd: fullProjectPath,\n        });\n        spinner.text = 'Running expo doctor to ensure package compatibility...';\n        await execa('npx', ['expo', 'install', '--fix'], {\n          cwd: fullProjectPath,\n        });\n      }\n\n      spinner.stop();\n      const { gitInit } = await prompts({\n        type: 'confirm',\n        name: 'gitInit',\n        message: 'Would you like to initialize a Git repository?',\n      });\n\n      if (gitInit) {\n        spinner.start('Initializing Git repository...');\n        try {\n          execSync('git init', { stdio: 'inherit', cwd: fullProjectPath });\n\n          execSync('git add -A', { stdio: 'inherit', cwd: fullProjectPath });\n          execSync('git commit -m \"initialize project with @react-native-reusables/cli\"', {\n            stdio: 'inherit',\n            cwd: fullProjectPath,\n          });\n\n          spinner.succeed('Git repository initialized successfully.');\n        } catch (error) {\n          logger.error('Failed to initialize Git repository:', error);\n        }\n      }\n\n      spinner.succeed('New project initialized successfully!');\n      console.log(`\\nTo get started, run the following commands:\\n`);\n      console.log(chalk.cyan(`cd ${projectPath}`));\n      if (packageManager !== 'none') {\n        console.log(\n          chalk.cyan(\n            `${packageManager} ${\n              packageManager === 'npm' || packageManager === 'bun' ? 'run ' : ''\n            }dev`\n          )\n        );\n      }\n      if (packageManager === 'none') {\n        console.log('Install the dependencies manually using your package manager of choice.');\n        console.log('Then run the dev script.');\n      }\n      console.log('\\nAdditional resources:');\n      console.log('- Documentation: https://rnr-docs.vercel.app');\n      console.log('- Report issues: https://github.com/mrzachnugent/react-native-reusables/issues');\n      process.exit(0);\n    } catch (error) {\n      handleError(error);\n    }\n  });\n\nasync function replaceAllInJsonFile(path: string, searchValue: string, replaceValue: string) {\n  try {\n    if (!existsSync(path)) {\n      logger.error(`The path ${path} does not exist.`);\n      process.exit(1);\n    }\n\n    const jsonValue = await fs.readFile(path, 'utf8');\n    const replacedValue = jsonValue.replaceAll(searchValue, replaceValue);\n\n    await fs.writeFile(path, replacedValue);\n  } catch (error) {\n    handleError(error);\n  }\n}\n","#!/usr/bin/env node\nimport { add } from '@/src/commands/add';\nimport { init } from '@/src/commands/init';\n\nimport { Command } from 'commander';\n\nprocess.on('SIGINT', () => process.exit(0));\nprocess.on('SIGTERM', () => process.exit(0));\n\nasync function main() {\n  const program = new Command()\n    .name('@react-native-reusables/cli')\n    .description('add components and dependencies to your project');\n\n  program.addCommand(add);\n  program.addCommand(init);\n\n  program.parse();\n}\n\nmain();\n"],"mappings":"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","names":["createMatchPath","resolveImport","importPath","config","cosmiconfig","loadConfig","z","DEFAULT_COMPONENTS","DEFAULT_LIB","explorer","rawConfigSchema","configSchema","getConfig","cwd","config","getRawConfig","resolveConfigPaths","tsConfig","resolveImport","configResult","detect","getPackageManager","targetDir","packageManager","chalk","logger","args","handleError","error","logger","chalk","fs","ora","path","prompts","promptForConfig","cwd","highlight","text","options","DEFAULT_COMPONENTS","DEFAULT_LIB","config","rawConfigSchema","proceed","logger","spinner","targetPath","resolveConfigPaths","chalk","Command","execa","existsSync","fs","ora","path","prompts","fileURLToPath","z","COMPONENTS","getComponentDependencies","componentName","visited","component","COMPONENTS","comp","dependencies","dependency","childDependencies","INVALID_COMPONENT_ERROR","getAllComponentsToWrite","componentNames","uniqueComponents","allDependencies","dep","filePath","fileURLToPath","fileDir","path","addOptionsSchema","z","add","Command","components","opts","options","cwd","existsSync","logger","config","getConfig","promptForConfig","selectedComponents","prompts","COMPONENTS","entry","spinner","ora","componentsToWrite","getAllComponentsToWrite","err","INVALID_COMPONENT_ERROR","component","npmPackages","comp","writeFiles","packageManager","getPackageManager","uniqueNpmPackages","execa","error","handleError","paths","overwriteFlag","compPath","targetDir","fs","chalk","overwrite","readFromPath","content","fixImports","icon","rawfile","componentsAlias","libAlias","existsSync","fs","path","copyFolder","src","dest","options","entries","entry","srcPath","destPath","chalk","execSync","Command","execa","existsSync","fs","ora","path","prompts","fileURLToPath","filePath","fileDir","init","cwd","option","logger","projectPath","packageManager","projectName","spinner","fullProjectPath","filesToIgnore","copyFolder","replaceAllInJsonFile","gitInit","error","handleError","searchValue","replaceValue","replacedValue","Command","main","program","add","init"]}