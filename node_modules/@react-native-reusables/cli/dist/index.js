#!/usr/bin/env node
import{createMatchPath as Y}from"tsconfig-paths";async function I(e,o){return Y(o.absoluteBaseUrl,o.paths)(e,void 0,()=>!0,[".ts",".tsx"])}import{cosmiconfig as Z}from"cosmiconfig";import{loadConfig as ee}from"tsconfig-paths";import{z as u}from"zod";var $="~/components",E="~/lib",oe=Z("components",{searchPlaces:["components.json"]}),C=u.object({aliases:u.object({components:u.string(),lib:u.string()})}),te=C.extend({resolvedPaths:u.object({lib:u.string(),components:u.string()})});async function M(e){let o=await ne(e);return o?await S(e,o):null}async function S(e,o){let t=await ee(e);if(t.resultType==="failed")throw new Error(`Failed to load tsconfig.json. ${t.message??""}`.trim());return te.parse({...o,resolvedPaths:{lib:await I(o.aliases.lib,t),components:await I(o.aliases.components,t)}})}async function ne(e){try{let o=await oe.search(e);return o?C.parse(o.config):null}catch{throw new Error(`Invalid configuration found in ${e}/components.json.`)}}import{detect as re}from"@antfu/ni";async function L(e){let o=await re({programmatic:!0,cwd:e});return o==="yarn@berry"?"yarn":o==="pnpm@6"?"pnpm":o==="bun"?"bun":o??"npm"}import P from"chalk";var a={error(...e){console.log(P.red(...e))},warn(...e){console.log(P.yellow(...e))},info(...e){console.log(P.cyan(...e))},success(...e){console.log(P.green(...e))},break(){console.log("")}};function d(e){typeof e=="string"&&(a.error(e),process.exit(1)),e instanceof Error&&(a.error(e.message),process.exit(1)),a.error("Something went wrong. Please try again."),process.exit(1)}import ie from"chalk";import{promises as se}from"fs";import ae from"ora";import ce from"path";import W from"prompts";async function z(e){let o=n=>ie.cyan(n),t=await W([{type:"text",name:"components",message:`Configure the import alias for ${o("components")}:`,initial:$},{type:"text",name:"lib",message:`Configure the import alias for ${o("lib")}:`,initial:E}]),r=C.parse({aliases:{lib:t.lib||$,components:t.components||E}}),{proceed:i}=await W({type:"confirm",name:"proceed",message:`Write configuration to ${o("components.json")}. Proceed?`,initial:!0});if(i){a.info("");let n=ae("Writing components.json...").start(),s=ce.resolve(e,"components.json");await se.writeFile(s,JSON.stringify(r,null,2),"utf8"),n.succeed()}return await S(e,r)}import h from"chalk";import{Command as pe}from"commander";import{execa as me}from"execa";import{existsSync as y,promises as x}from"fs";import le from"ora";import p from"path";import O from"prompts";import{fileURLToPath as de}from"url";import{z as w}from"zod";var f=[{name:"accordion",dependencies:["text"],icons:["ChevronDown"],npmPackages:["@rn-primitives/accordion"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/accordion.tsx",to:{folder:"ui",file:"accordion.tsx"}}]},{name:"alert",dependencies:["text"],icons:[],npmPackages:[],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/alert.tsx",to:{folder:"ui",file:"alert.tsx"}}]},{name:"alert-dialog",dependencies:["button","text"],icons:[],npmPackages:["@rn-primitives/alert-dialog"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/alert-dialog.tsx",to:{folder:"ui",file:"alert-dialog.tsx"}}]},{name:"aspect-ratio",dependencies:[],icons:[],npmPackages:["@rn-primitives/aspect-ratio"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/aspect-ratio.tsx",to:{folder:"ui",file:"aspect-ratio.tsx"}}]},{name:"avatar",dependencies:[],icons:[],npmPackages:["@rn-primitives/avatar"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/avatar.tsx",to:{folder:"ui",file:"avatar.tsx"}}]},{name:"badge",dependencies:[],icons:[],npmPackages:["@rn-primitives/slot","@rn-primitives/types"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/badge.tsx",to:{folder:"ui",file:"badge.tsx"}}]},{name:"button",dependencies:["text"],icons:[],npmPackages:["@rn-primitives/types"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/button.tsx",to:{folder:"ui",file:"button.tsx"}}]},{name:"card",dependencies:["text"],icons:[],npmPackages:["@rn-primitives/types"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/card.tsx",to:{folder:"ui",file:"card.tsx"}}]},{name:"checkbox",dependencies:[],icons:["Check"],npmPackages:["@rn-primitives/checkbox"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/checkbox.tsx",to:{folder:"ui",file:"checkbox.tsx"}}]},{name:"collapsible",dependencies:[],icons:[],npmPackages:["@rn-primitives/collapsible"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/collapsible.tsx",to:{folder:"ui",file:"collapsible.tsx"}}]},{name:"context-menu",dependencies:["text"],icons:["Check","ChevronDown","ChevronRight","ChevronUp"],npmPackages:["@rn-primitives/context-menu"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/context-menu.tsx",to:{folder:"ui",file:"context-menu.tsx"}}]},{name:"dialog",dependencies:[],icons:["X"],npmPackages:["@rn-primitives/dialog"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/dialog.tsx",to:{folder:"ui",file:"dialog.tsx"}}]},{name:"dropdown-menu",dependencies:["text"],icons:["Check","ChevronDown","ChevronRight","ChevronUp"],npmPackages:["@rn-primitives/dropdown-menu"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/dropdown-menu.tsx",to:{folder:"ui",file:"dropdown-menu.tsx"}}]},{name:"hover-card",dependencies:[],icons:[],npmPackages:["@rn-primitives/hover-card"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/hover-card.tsx",to:{folder:"ui",file:"hover-card.tsx"}}]},{name:"input",dependencies:[],icons:[],npmPackages:[],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/input.tsx",to:{folder:"ui",file:"input.tsx"}}]},{name:"label",dependencies:[],icons:[],npmPackages:["@rn-primitives/label"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/label.tsx",to:{folder:"ui",file:"label.tsx"}}]},{name:"menubar",dependencies:["text"],icons:["Check","ChevronDown","ChevronRight","ChevronUp"],npmPackages:["@rn-primitives/menubar"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/menubar.tsx",to:{folder:"ui",file:"menubar.tsx"}}]},{name:"navigation-menu",dependencies:[],icons:["ChevronDown"],npmPackages:["@rn-primitives/navigation-menu"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/navigation-menu.tsx",to:{folder:"ui",file:"navigation-menu.tsx"}}]},{name:"popover",dependencies:["text"],icons:[],npmPackages:["@rn-primitives/popover"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/popover.tsx",to:{folder:"ui",file:"popover.tsx"}}]},{name:"progress",dependencies:[],icons:[],npmPackages:["@rn-primitives/progress"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/progress.tsx",to:{folder:"ui",file:"progress.tsx"}}]},{name:"radio-group",dependencies:[],icons:[],npmPackages:["@rn-primitives/radio-group"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/radio-group.tsx",to:{folder:"ui",file:"radio-group.tsx"}}]},{name:"select",dependencies:[],icons:["Check","ChevronDown","ChevronUp"],npmPackages:["@rn-primitives/select"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/select.tsx",to:{folder:"ui",file:"select.tsx"}}]},{name:"separator",dependencies:[],icons:[],npmPackages:["@rn-primitives/separator"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/separator.tsx",to:{folder:"ui",file:"separator.tsx"}}]},{name:"skeleton",dependencies:[],icons:[],npmPackages:[],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/skeleton.tsx",to:{folder:"ui",file:"skeleton.tsx"}}]},{name:"switch",dependencies:[],icons:[],npmPackages:["@rn-primitives/switch"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/switch.tsx",to:{folder:"ui",file:"switch.tsx"}}]},{name:"table",dependencies:["text"],icons:[],npmPackages:["@rn-primitives/table"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/table.tsx",to:{folder:"ui",file:"table.tsx"}}]},{name:"tabs",dependencies:["text"],icons:[],npmPackages:["@rn-primitives/tabs"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/tabs.tsx",to:{folder:"ui",file:"tabs.tsx"}}]},{name:"text",dependencies:[],icons:[],npmPackages:["@rn-primitives/slot","@rn-primitives/types"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/text.tsx",to:{folder:"ui",file:"text.tsx"}}]},{name:"textarea",dependencies:[],icons:[],npmPackages:[],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/textarea.tsx",to:{folder:"ui",file:"textarea.tsx"}}]},{name:"toggle",dependencies:["text"],icons:[],npmPackages:["@rn-primitives/toggle"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/toggle.tsx",to:{folder:"ui",file:"toggle.tsx"}}]},{name:"toggle-group",dependencies:["text"],icons:[],npmPackages:["@rn-primitives/toggle-group"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/toggle-group.tsx",to:{folder:"ui",file:"toggle-group.tsx"}}]},{name:"tooltip",dependencies:["text"],icons:[],npmPackages:["@rn-primitives/tooltip"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/tooltip.tsx",to:{folder:"ui",file:"tooltip.tsx"}}]},{name:"typography",dependencies:[],icons:[],npmPackages:["@rn-primitives/slot","@rn-primitives/types"],paths:[{from:"./node_modules/@rnr/reusables/src/components/ui/typography.tsx",to:{folder:"ui",file:"typography.tsx"}}]}];function U(e,o=new Set){let t=f.find(i=>i.name===e);if(!t)return[];o.add(e);let r=t.dependencies.slice();return t.dependencies.forEach(i=>{if(!o.has(i)){let n=U(i,o);r=r.concat(n)}}),r}var j="invalid component";function G(e){let o=new Set;if(e.some(t=>!f.find(r=>r.name===t)))throw new Error(j);return e.forEach(t=>{let r=U(t);r.unshift(t),r.forEach(i=>{o.add(i)})}),Array.from(o).map(t=>{let r=f.find(i=>i.name===t);if(!r)throw new Error(j);return r})}var ue=de(import.meta.url),V=p.dirname(ue),fe=w.object({components:w.array(w.string()).optional(),overwrite:w.boolean(),cwd:w.string(),path:w.string().optional()}),B=new pe().name("add").description("add components to your project").argument("[components...]","the components to add").option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async(e,o)=>{try{let t=fe.parse({components:e,...o}),r=p.resolve(t.cwd);y(r)||(a.error(`The path ${r} does not exist. Please try again.`),process.exit(1));let i=await M(r);i||(i=await z(r));let n=t.components??[];if(!n?.length){let{components:l}=await O({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:f.map(k=>({title:k.name,value:k.name,selected:!1}))});n=l}n?.length||(a.warn("No components selected. Exiting."),process.exit(0));let s=le("Installing components...").start(),m=[];try{m=G(n)}catch(l){l instanceof Error&&l.message===j&&(a.error(`Invalid component(s): ${n.filter(k=>!f.find(Q=>Q.name===k)).join(", ")}`),process.exit(1)),a.error(l)}let c=[];for(let l of m)s.text=`Installing ${l.name}...`,await ge(l,l.paths,i,s,t.overwrite),c.push(...l.npmPackages);let b=await L(r),T=Array.from(new Set(c));T.length&&(s.text=`Installing ${T.join(", ")}...`,await me(b,[b==="npm"?"install":"add",...T],{cwd:r})),s.succeed("Done.")}catch(t){d(t)}});async function ge(e,o,t,r,i){for(let n of o){let s=p.join(t.resolvedPaths.components,n.to.folder);if(y(s)||await x.mkdir(s,{recursive:!0}),r.stop(),y(p.join(s,n.to.file))){let c=[n.to.folder,n.to.file].join("/");if(!i){a.info(`File already exists: ${h.bgCyan(c)} was skipped. To overwrite, run with the ${h.green("--overwrite")} flag.`);continue}let{overwrite:b}=await O({type:"confirm",name:"overwrite",message:`File already exists: ${h.yellow(c)}. Would you like to overwrite?`,initial:!1});if(!b){a.info("Skipped");continue}}r.start(`Installing ${e.name}...`);let m=n.distFrom?p.join(V,"../__generated/components",n.distFrom):p.join(V,"../__generated/components",n.to.folder,n.to.file);try{let c=await x.readFile(p.resolve(m),"utf8");await x.writeFile(p.join(s,n.to.file),he(c,t.aliases.components,t.aliases.lib))}catch(c){d(c)}}for(let n of e.icons??[]){let s=p.resolve(t.resolvedPaths.lib,"icons");if(!y(s)){await x.mkdir(s,{recursive:!0});try{await x.writeFile(p.join(s,"iconWithClassName.ts"),`import type { LucideIcon } from 'lucide-react-native';
import { cssInterop } from 'nativewind';

export function iconWithClassName(icon: LucideIcon) {
cssInterop(icon, {
  className: {
    target: 'style',
    nativeStyleToProp: {
      color: true,
      opacity: true,
    },
  },
});
}`)}catch(m){d(m)}}if(y(p.join(s,`${n}.tsx`))){let m=p.join(s,`${n}.tsx`);if(!i){a.info(`File already exists: ${h.bgCyan(`${n}.tsx`)} was skipped. To overwrite, run with the ${h.green("--overwrite")} flag.`);continue}let{overwrite:c}=await O({type:"confirm",name:"overwrite",message:`File already exists: ${h.yellow(m)}. Would you like to overwrite?`,initial:!1});if(!c){a.info(`Skipped ${n}.tsx`);continue}}r.start(`Adding the ${n} icon...`);try{await x.writeFile(p.join(s,`${n}.tsx`),`import { ${n} } from 'lucide-react-native';
import { iconWithClassName } from './iconWithClassName';
iconWithClassName(${n});
export { ${n} };`)}catch(m){d(m)}}}function he(e,o,t){return e.replace("./typography",`${o}/ui/typography`).replace("./text",`${o}/ui/text`).replaceAll("../../components",o).replaceAll("../../lib",t)}import{existsSync as q,promises as v}from"fs";import _ from"path";async function R(e,o,t={ignore:[],renameTemplateFiles:!1}){if(!q(e))throw new Error(`Source folder does not exist: ${e}`);q(o)||await v.mkdir(o,{recursive:!0});let r=await v.readdir(e,{withFileTypes:!0});for(let i of r){let n=_.join(e,i.name),s=_.join(o,i.name);t.ignore.includes(i.name)||(i.isDirectory()?await R(n,s,t):i.isFile()&&(t.renameTemplateFiles&&i.name==="gitignore-template"?await v.copyFile(n,_.join(o,".gitignore")):t.renameTemplateFiles&&i.name==="npmrc-template"?await v.copyFile(n,_.join(o,".npmrc")):await v.copyFile(n,s)))}}import J from"chalk";import{execSync as D}from"child_process";import{Command as xe}from"commander";import{execa as H}from"execa";import{existsSync as F,promises as A}from"fs";import we from"ora";import g from"path";import N from"prompts";import{fileURLToPath as ye}from"url";var ve=ye(import.meta.url),be=g.dirname(ve),K=new xe().name("init").description("Initialize a new React Native Reusables project").action(async()=>{try{let e=process.cwd();if(F(e)&&F(g.join(e,"package.json"))){let{option:c}=await N({type:"select",name:"option",message:"Package.json found. How would you like to proceed?",choices:[{title:"Initialize a new project",value:"new-project"},{title:"Cancel",value:"cancel"}],initial:!1});c==="cancel"&&(a.info("Installation cancelled."),process.exit(0))}let{projectPath:o}=await N({type:"text",name:"projectPath",message:"Enter the project name or relative path (e.g., 'my-app' or './apps/my-app'):",initial:"./my-app"}),{packageManager:t}=await N({type:"select",name:"packageManager",message:"Which package manager would you like the CLI to use?",choices:[{title:"npm",value:"npm"},{title:"yarn",value:"yarn"},{title:"pnpm",value:"pnpm"},{title:"bun",value:"bun"},{title:"None.",value:"none"}]}),r=g.basename(o),i=we(`Initializing ${r}...`).start(),n=g.join(e,o);F(n)||await A.mkdir(n,{recursive:!0});let s=[];t!=="pnpm"&&s.push("npmrc-template"),await R(g.join(be,"../__generated/starter-base"),n,{ignore:s,renameTemplateFiles:!0}),await Promise.all([X(g.join(n,"app.json"),"starter-base",r),X(g.join(n,"package.json"),"@rnr/starter-base",r)]),t!=="none"&&(i.start(`Installing dependencies using ${t} (this may take a few minutes)...`),await H(t,["install"],{cwd:n}),i.text="Running expo doctor to ensure package compatibility...",await H("npx",["expo","install","--fix"],{cwd:n})),i.stop();let{gitInit:m}=await N({type:"confirm",name:"gitInit",message:"Would you like to initialize a Git repository?"});if(m){i.start("Initializing Git repository...");try{D("git init",{stdio:"inherit",cwd:n}),D("git add -A",{stdio:"inherit",cwd:n}),D('git commit -m "initialize project with @react-native-reusables/cli"',{stdio:"inherit",cwd:n}),i.succeed("Git repository initialized successfully.")}catch(c){a.error("Failed to initialize Git repository:",c)}}i.succeed("New project initialized successfully!"),console.log(`
To get started, run the following commands:
`),console.log(J.cyan(`cd ${o}`)),t!=="none"&&console.log(J.cyan(`${t} ${t==="npm"||t==="bun"?"run ":""}dev`)),t==="none"&&(console.log("Install the dependencies manually using your package manager of choice."),console.log("Then run the dev script.")),console.log(`
Additional resources:`),console.log("- Documentation: https://rnr-docs.vercel.app"),console.log("- Report issues: https://github.com/mrzachnugent/react-native-reusables/issues"),process.exit(0)}catch(e){d(e)}});async function X(e,o,t){try{F(e)||(a.error(`The path ${e} does not exist.`),process.exit(1));let i=(await A.readFile(e,"utf8")).replaceAll(o,t);await A.writeFile(e,i)}catch(r){d(r)}}import{Command as ke}from"commander";process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function Ce(){let e=new ke().name("@react-native-reusables/cli").description("add components and dependencies to your project");e.addCommand(B),e.addCommand(K),e.parse()}Ce();
//# sourceMappingURL=index.js.map